import requests
from binascii import hexlify, unhexlify
from time import sleep
from oracle import Oracle
from ipdb import set_trace

target = "http://localhost:5000%s"

cipher_text = None
iv = None

def get_encrypted_message():
    # gets IV and ciphertext from backend and saves them
    # format is hex string
    print("Get the encrypted message")
    global cipher_text, iv
    resp = requests.get(target % "/cipher")
    iv, cipher_text = resp.text.splitlines()
    print("IV:     %s\nCipher: %s" % (iv, cipher_text))


def decrypt():
    # format of cipher_text is hex string
    print("Let the backend decrypt the message for testing")
    json = { 'cipher_text': cipher_text }
    resp = requests.post(target % "/decrypt", json=json)
    print(resp.text)


def oracle(cipher):
    # padding oracle client for this challenge
    # cipher:  ciphertext for the backend in byte format
    # returns: True if no Padding Exception occured else False
    json = { 'cipher_text': hexlify(cipher) }
    resp = requests.post(target % "/decrypt", json=json)
    return resp.status_code == 200


def padding_oracle_attack():
    Oracle(unhexlify(cipher_text), 16, oracle, debug=False, iv=unhexlify(iv))

    
get_encrypted_message()
decrypt()
padding_oracle_attack()
